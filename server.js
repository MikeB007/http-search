const express = require('express');
const https = require('https');
const fs = require('fs');
const path = require('path');
const app = express();
const bodyParser = require("body-parser");

// Ports - avoid conflict with API server on 443
const httpPort = 8080;
const httpsPort = 8443;

const users = [];

app.use(bodyParser.json());

// Serve static files from assets directory
app.use('/assets', express.static(path.join(__dirname, 'src/assets')));

// Serve Angular build files
app.use(express.static(path.join(__dirname, 'dist/news-search')));

// Handle Angular routing - send all requests to index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'src/index.html'));
});

// SSL Certificate options (you need to provide these files)
// SSL Certificate loading: support either a PKCS#12 keystore (.p12/.pfx) or
// separate PEM key+cert files. Prefer environment variables so you can run
// different environments without editing this file.
//
// Environment variables accepted:
// - PFX_PATH: path to a .p12 or .pfx file (if present, this is used)
// - SSL_PASSPHRASE: optional passphrase for the PFX
// - KEY_PATH: path to PEM private key file (fallback)
// - CERT_PATH: path to PEM certificate file (fallback)
// - CA_PATH: optional path to PEM CA bundle
// Example (PowerShell):
// $env:PFX_PATH = 'G:\path\to\keystore.p12'; $env:SSL_PASSPHRASE = 'mypw'; node .\server.js

let httpsOptions;
let hasSSL = false;

try {
  if (process.env.PFX_PATH && fs.existsSync(process.env.PFX_PATH)) {
    // Use PKCS#12 (PFX) directly
    console.log('Using PFX keystore:', process.env.PFX_PATH);
    httpsOptions = {
      pfx: fs.readFileSync(process.env.PFX_PATH),
    };
    if (process.env.SSL_PASSPHRASE) {
      httpsOptions.passphrase = process.env.SSL_PASSPHRASE;
    }
    hasSSL = true;
  } else {
    // Fallback to PEM key/cert
    const keyPath = process.env.KEY_PATH || 'path/to/your/private-key.pem';
    const certPath = process.env.CERT_PATH || 'path/to/your/certificate.pem';
    
    if (fs.existsSync(keyPath) && fs.existsSync(certPath)) {
      console.log('Using PEM files. KEY_PATH=%s CERT_PATH=%s', keyPath, certPath);
      httpsOptions = {
        key: fs.readFileSync(keyPath),
        cert: fs.readFileSync(certPath),
      };
      if (process.env.CA_PATH && fs.existsSync(process.env.CA_PATH)) {
        httpsOptions.ca = fs.readFileSync(process.env.CA_PATH);
      }
      hasSSL = true;
    } else {
      console.log('⚠️  SSL certificates not found. Checking for auto-generated certificates...');
      
      // Try to find auto-generated certificates
      const autoGeneratedPFX = path.join(__dirname, 'certs', 'production.p12');
      const fallbackPFX = path.join(__dirname, 'certs', 'localhost.p12');
      
      if (fs.existsSync(autoGeneratedPFX)) {
        console.log('✓ Found auto-generated certificate:', autoGeneratedPFX);
        httpsOptions = {
          pfx: fs.readFileSync(autoGeneratedPFX),
          passphrase: process.env.SSL_PASSPHRASE || 'production123'
        };
        hasSSL = true;
      } else if (fs.existsSync(fallbackPFX)) {
        console.log('✓ Found fallback certificate:', fallbackPFX);
        httpsOptions = {
          pfx: fs.readFileSync(fallbackPFX),
          passphrase: process.env.SSL_PASSPHRASE || 'dev123'
        };
        hasSSL = true;
      } else {
        console.log('⚠️  No SSL certificates found. Will run HTTP-only mode.');
        hasSSL = false;
      }
    }
  }
} catch (err) {
  console.error('Failed to load SSL files:', err.message);
  console.log('⚠️  Falling back to HTTP-only mode.');
  hasSSL = false;
}

// Create servers based on SSL availability
const http = require('http');

if (hasSSL) {
  // Create HTTPS server
  https.createServer(httpsOptions, app).listen(httpsPort, () => {
    console.log(`✅ HTTPS Server listening on port ${httpsPort}`);
    console.log(`🌐 Access your application at: https://localhost:${httpsPort}`);
  });

  // Redirect HTTP to HTTPS
  http.createServer((req, res) => {
    res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
    res.end();
  }).listen(httpPort, () => {
    console.log(`🔄 HTTP Server redirecting from port ${httpPort} to HTTPS`);
  });
} else {
  // HTTP-only mode
  console.log('🚀 Starting in HTTP-only mode (no SSL certificates available)');
  http.createServer(app).listen(httpPort, () => {
    console.log(`⚠️  HTTP Server listening on port ${httpPort} (no HTTPS available)`);
    console.log(`🌐 Access your application at: http://localhost:${httpPort}`);
    console.log('💡 Run "npm run setup:certs" to enable HTTPS');
  });
}